type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    # Write your code here
    # i make it using lists and some dicts
    # will think about using lists inner lists or something like multilevel arrays
    import time

    make_list = ['Starting to make a coffee',
                 'Grinding coffee beans',
                 'Boiling water',
                 'Mixing boiled water with crushed coffee beans',
                 'Pouring coffee into the cup',
                 'Pouring some milk into the cup',
                 'Coffee is ready!']

    ingridients = {'espresso': [250, 0, 16, 1, -4],
                   'latte': [350, 75, 20, 1, -7],
                   'cappuccino': [200, 100, 12, 1, -6]  # water, milk, coffee, cups, money
                   }

    fill_input = ['Write how many ml of water do you want to add: ',
                  'Write how many ml of milk do you want to add: ',
                  'Write how many grams of coffee beans do you want to add: ',
                  'Write how many disposable cups of coffee do you want to add: '
                  ]

    fixed_how_many_has = [400, 540, 120, 9, 550]  # water, milk, coffee, cups, money


    def action():
        global ingridients, fill_input, fixed_how_many_has
        act = input('\nWrite action (buy, fill, take):')
        if act == 'take':
            print(f'I gave you ${fixed_how_many_has[4]}')
            fixed_how_many_has[4] = 0
        elif act == 'fill':
                for kind in range(0, len(fixed_how_many_has) - 1):
                    fixed_how_many_has[kind] += int(input(fill_input[kind]))
        elif act == 'buy':
                coffee = int(input('What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: '))
                if coffee == 1:
                    coffee = 'espresso'
                elif coffee == 2:
                    coffee = 'latte'
                elif coffee == 3:
                    coffee = 'cappuccino'
                for a in range(0, len(fixed_how_many_has)):
                    fixed_how_many_has[a] += -ingridients[coffee][a]
        var_var()
        now_print()


    def var_var():
        global now_water, now_milk, now_coffee_beans, money, disposable_cups
        now_water, now_milk, now_coffee_beans, disposable_cups, money = fixed_how_many_has


    def now_print():
        global now_water, now_milk, now_coffee_beans, disposable_cups, money
        print('\nThe coffee machine has:')
        print(f'{now_water} of water')
        print(f'{now_milk} of milk')
        print(f'{now_coffee_beans} of coffee beans')
        print(f'{disposable_cups} of disposable cups')
        print(f'{money} of money')


    var_var()
    now_print()
    action()
  learner_created: false
- name: machine/coffee_machine2.py
  visible: true
  text: |
    # Write your code here
    import time

    text_list = ['Starting to make a coffee',
                 'Grinding coffee beans',
                 'Boiling water',
                 'Mixing boiled water with crushed coffee beans',
                 'Pouring coffee into the cup',
                 'Pouring some milk into the cup',
                 'Coffee is ready!']

    ingridients = {'water': 200,
                   'milk': 50,
                   'coffee beans': 15
                   }


    def cups_need_query():
        # Ask to user to enter how many coffee to prepare
        cups_number = int(input('Write how many cups of coffee you will need: '))
        # print(f'You order {cups_number} cups of coffee')
        return (cups_number)


    def how_many_has():
        now_water = int(input('Write how many ml of water the coffee machine has: '))
        now_milk = int(input('Write how many ml of milk the coffee machine has: '))
        now_coffee_beans = int(input('Write how many grams of '
                                     'coffee beans the coffee machine has: '))
        #    now_water = 300
        #    now_milk = 65
        #    now_coffee_beans = 100
        return now_water, now_milk, now_coffee_beans


    def calc(cups_number):  # calculate how much ingridients we neeed
        water_need = ingridients['water'] * cups_number
        milk_need = ingridients['milk'] * cups_number
        coffee_beans_need = ingridients['coffee beans'] * cups_number
        return water_need, milk_need, coffee_beans_need


    def calc_output(cups_number, water_need, milk_need, coffee_beans_need):
        # output of our calculations, what we need to prepare coffee
        print('For %s cups of coffee you will need:' % cups_number)
        print('%s ml of water' % water_need)
        print('%s ml of milk' % milk_need)
        print('%s g of cofee beans' % coffee_beans_need)  # some comments


    def cups_enought(now_water, now_milk, now_coffee_beans):
        max_cups = min(now_water // ingridients['water'],
                       now_milk // ingridients['milk'],
                       now_coffee_beans // ingridients['coffee beans'])
        return max_cups


    now_water, now_milk, now_coffee_beans = how_many_has()
    cups_number = cups_need_query()
    water_need, milk_need, coffee_beans_need = calc(cups_number)
    cups_can_do = cups_enought(now_awater, now_milk, now_coffee_beans)


    if cups_can_do == cups_number:
        print('Yes, I can make that amount of coffee')
    elif cups_can_do > cups_number:
        print(f"Yes, I can make that amount of coffee (and even "
              f"{cups_can_do - cups_number} more than that)")
    else:
        print(f"No, I can make only {cups_can_do} cups of coffee")
  learner_created: false
- name: machine/coffee_machine3.py
  visible: true
  text: |
    # Write your code here
    # i make it using lists and some dicts
    # will think about using lists inner lists or something like multilevel arrays
    import time

    make_list = ['Starting to make a coffee',
                 'Grinding coffee beans',
                 'Boiling water',
                 'Mixing boiled water with crushed coffee beans',
                 'Pouring coffee into the cup',
                 'Pouring some milk into the cup',
                 'Coffee is ready!']

    ingridients = {'espresso': [250, 0, 16, 1, -4],
                   'latte': [350, 75, 20, 1, -7],
                   'cappuccino': [200, 100, 12, 1, -6]  # water, milk, coffee, cups, money
                   }

    fill_input = ['Write how many ml of water do you want to add: ',
                  'Write how many ml of milk do you want to add: ',
                  'Write how many grams of coffee beans do you want to add: ',
                  'Write how many disposable cups of coffee do you want to add: '
                  ]

    fixed_how_many_has = [400, 540, 120, 9, 550]  # water, milk, coffee, cups, money


    def action():
        global ingridients, fill_input, fixed_how_many_has
        action = input('\nWrite action (buy, fill, take):')
        if action == 'take':
            print(f'I gave you ${fixed_how_many_has[4]}')
            fixed_how_many_has[4] = 0

        elif action == 'fill':
            for kind in range(0, len(fixed_how_many_has) - 1):
                fixed_how_many_has[kind] += int(input(fill_input[kind]))
    #        now_water += int(input('Write how many ml of water do you want to add: '))
    #        now_milk += int(input('Write how many ml of milk do you want to add: '))
    #        now_coffee_beans += int(input('Write how many grams of coffee beans do you want to add: '))
    #        disposable_cups += int(input('Write how many disposable cups of coffee do you want to add: '))
        elif action == 'buy':
            coffee = int(input('What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: '))
            if coffee == 1:
                coffee = 'espresso'
            elif coffee == 2:
                coffee = 'latte'
            elif coffee == 3:
                coffee = 'cappuccino'
                for a in range(0, len(fixed_how_many_has)):
                    fixed_how_many_has[a] += -ingridients[coffee][a]
        var_var()
        now_print()


    def var_var():
        global now_water, now_milk, now_coffee_beans, money, disposable_cups
        now_water, now_milk, now_coffee_beans, disposable_cups, money = fixed_how_many_has


    def now_print():
        global now_water, now_milk, now_coffee_beans, disposable_cups, money
        print('\nThe coffee machine has:')
        print(f'{now_water} of water')
        print(f'{now_milk} of milk')
        print(f'{now_coffee_beans} of coffee beans')
        print(f'{disposable_cups} of disposable cups')
        print(f'{money} of money')


    var_var()
    now_print()
    action()
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/370/implement
status: Failed
record: 4
